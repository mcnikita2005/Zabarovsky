СТР 54 ИСПРАВЛЯЮ МАРТ
Задание 1
def выбор_чисел(P):
    число = 2
    while число < P:
        print(число)
        число += 1

P = int(input("Введите число P: "))
выбор_чисел(P)

Задание 2 
def вывод_чисел(A, B):
    число = A + 1
    while число < B:
        print(число)
        число += 1

A = int(input("Введите число A: "))
B = int(input("Введите число B: "))

if A < B:
    вывод_чисел(A, B)
else:
    print("Число A должно быть меньше числа B.")

Задание 3 
def вывод_чисел(A, B):
    число = B - 1
    while число > A:
        print(число)
        число -= 1

A = int(input("Введите число A: "))
B = int(input("Введите число B: "))

if A < B:
    вывод_чисел(A, B)
else:
    print("Число A должно быть меньше числа B.")

Задание 4
def наименьшее_целое(N):
    K = 1
    while 3 * K <= N:
        K += 1
    return K, 3 * K

N = int(input("Введите целое число N (> 1): "))

if N > 1:
    наименьшее_целое_K, значение_3K = наименьшее_целое(N)
    print("Наименьшее целое K:", наименьшее_целое_K)
    print("Значение 3K:", значение_3K)
else:
    print("Число N должно быть больше 1.")
    
    Задание 5
    def наибольшее_целое(N):
    K = N // 3
    while 3 * K >= N:
        K -= 1
    return K

N = int(input("Введите целое число N (> 1): "))

if N > 1:
    наибольшее_целое_K = наибольшее_целое(N)
    print("Наибольшее целое K:", наибольшее_целое_K)
else:
    print("Число N должно быть больше 1.")

ЗАдание 6
def вывод_чисел(N):
    число = 1
    while число < N:
        print(число)
        число += 1

N = int(input("Введите натуральное число N: "))
вывод_чисел(N)

Задание 8
def find_square(n):
    i = 1
    while i * i <= n:
        i += 1
    return i
n = int(input("Введите число n: "))
result = find_square(n)
print("Первое натуральное число, квадрат которого больше", n, ":", result)

Задание 9
def find_number():
    number = 200
    while True:
        number += 1
        if number % 17 == 0:
            return number

result = find_number()
print("Минимальное число больше 200, которое делится нацело на 17:", result)

Задание 10
def find_max_number():
    max_number = 0
    for number in range(1, 601):
        if number % 28 == 0:
            max_number = number
    return max_number

result = find_max_number()
print("Максимальное число, не превышающее 600 и делящееся нацело на 28:", result)

Задание 11
def find_day():
    distance = 10  
    day = 1  
    while distance <= 20:
        distance += distance * 0.1  # Увеличение пробега на 10% от предыдущего дня
        day += 1

    return day

result = find_day()
print("Лыжник пробежит более 20 км в", result, "-й день")

Задание 14
def print_multiples():
    for number in range(11, 100, 11):
        print(number)
print("Натуральные числа, кратные одиннадцати и меньше 100:")
print_multiples()

ДОПОЛНИТЕЛЬНЫЕ ЗАДАЧИ 
Задание 1
def swap_digits(number):
    if number < 10 or number > 99:
        return "Введите двухзначное число"

    tens_digit = number // 10  # Получаем первую цифру
    ones_digit = number % 10  # Получаем вторую цифру

    swapped_number = ones_digit * 10 + tens_digit  # Переставляем цифры

    return swapped_number

input_number = int(input("Введите двухзначное число: "))
result = swap_digits(input_number)
print("Полученное число после перестановки цифр:", result)

Задание 2
import math

def calculate_distance(x1, y1, x2, y2):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return distance

def calculate_perimeter(x1, y1, x2, y2, x3, y3):
    side1 = calculate_distance(x1, y1, x2, y2)
    side2 = calculate_distance(x2, y2, x3, y3)
    side3 = calculate_distance(x3, y3, x1, y1)
    perimeter = side1 + side2 + side3
    return perimeter

def calculate_area(x1, y1, x2, y2, x3, y3):
    side1 = calculate_distance(x1, y1, x2, y2)
    side2 = calculate_distance(x2, y2, x3, y3)
    side3 = calculate_distance(x3, y3, x1, y1)
    semiperimeter = (side1 + side2 + side3) / 2
    area = math.sqrt(semiperimeter * (semiperimeter - side1) * (semiperimeter - side2) * (semiperimeter - side3))
    return area

x1, y1 = map(float, input("Введите координаты вершины A (x1, y1): ").split())
x2, y2 = map(float, input("Введите координаты вершины B (x2, y2): ").split())
x3, y3 = map(float, input("Введите координаты вершины C (x3, y3): ").split())

perimeter = calculate_perimeter(x1, y1, x2, y2, x3, y3)
area = calculate_area(x1, y1, x2, y2, x3, y3)

print("Периметр треугольника:", perimeter)
print("Площадь треугольника:", area)

Задание 3
def find_digits(number):
    if number < 10 or number > 99:
        return "Введите двухзначное число"

    tens = number // 10  # Получаем число десятков
    ones = number % 10  # Получаем число единиц

    return tens, ones

input_number = int(input("Введите двухзначное число: "))
tens_digit, ones_digit = find_digits(input_number)
print("Число десятков:", tens_digit)
print("Число единиц:", ones_digit)

Задание 4
def convert_to_meters(value, unit):
    if unit == "cm":
        return value / 100
    elif unit == "dm":
        return value / 10
    elif unit == "mm":
        return value / 1000
    else:
        return "Invalid unit"

value = 150
unit = "cm"
meters = convert_to_meters(value, unit)
print(f"{value} {unit} is equal to {meters} meters")

Задание 6 
def multiply_two_smallest_numbers(numbers):
    sorted_numbers = sorted(numbers)
    return sorted_numbers[0] * sorted_numbers[1]

numbers = [5, 3, 8]
result = multiply_two_smallest_numbers(numbers)
print(f"The product of the two smallest numbers {numbers} is {result}")

Задание 7
import math

def solve_quadratic_equation(a, b, c):
    discriminant = b**2 - 4*a*c

    if discriminant > 0:
        root1 = (-b + math.sqrt(discriminant)) / (2*a)
        root2 = (-b - math.sqrt(discriminant)) / (2*a)
        return root1, root2
    elif discriminant == 0:
        root = -b / (2*a)
        return root
    else:
        return "No real roots"

a = 1
b = -3
c = 2
roots = solve_quadratic_equation(a, b, c)
print(f"The roots of the quadratic equation {a}x^2 + {b}x + {c} = 0 are: {roots}")

Задание 9 
def calculate_bonus(salary):
    if salary > 5000:
        bonus = salary * 0.1
    else:
        bonus = salary * 0.12
    return bonus
salary = 6000
bonus = calculate_bonus(salary)
print(f"The bonus for a salary of {salary} is {bonus}")

Задание 10
def find_sum_of_two_largest_numbers(numbers):
    sorted_numbers = sorted(numbers, reverse=True)
    sum_of_two_largest = sorted_numbers[0] + sorted_numbers[1]
    return sum_of_two_largest

numbers = [7, 2, 9, 4]
sum_of_two_largest = find_sum_of_two_largest_numbers(numbers)
print(f"The sum of the two largest numbers {numbers} is {sum_of_two_largest}")

Задание 11
def get_day_of_week(number):
    days = {
        1: "понедельник",
        2: "вторник",
        3: "среда",
        4: "четверг",
        5: "пятница",
        6: "суббота",
        7: "воскресенье"
    }
    
    if number in days:
        return days[number]
    else:
        return "Неверный номер дня"

number = 3
day = get_day_of_week(number)
print(f"The day of the week with number {number} is {day}")

Задание 13
def calculate_product(N):
    product = 1

    if N % 2 == 0:  # Если N четное
        for i in range(2, N+1, 2):
            product *= i
    else:  # Если N нечетное
        for i in range(1, N+1, 2):
            product *= i

    return product
N = 6
result = calculate_product(N)
print(f"The product of numbers from 2 to {N} for even N or from 1 to {N} for odd N is {result}")

Задание 16
def count_powerful_cars(power_list):
    count = 0

    for power in power_list:
        if power > 200:
            count += 1

    return count

car_powers = [180, 210, 195, 220, 205, 190, 225, 215, 200, 230, 250]
powerful_car_count = count_powerful_cars(car_powers)
print(f"The number of cars with engine power exceeding 200 horsepower is: {powerful_car_count}")

Задание 17
def calculate_total_distance():
    initial_distance = 10
    total_distance = initial_distance
    day = 1

    while total_distance <= 100:
        distance_increase = initial_distance * 0.1  # Увеличение пробега на 10% от пробега предыдущего дня
        initial_distance += distance_increase
        total_distance += initial_distance
        day += 1

    return day

day = calculate_total_distance()
print(f"The total distance will exceed 100 km on day {day}")

Задание 19
def fill_grades():
    students = 20
    exams = 3

    grade_sheet = []  # Создаем пустую ведомость

    for student in range(1, students + 1):
        grades = []  # Создаем пустой список оценок для каждого студента

        for exam in range(1, exams + 1):
            grade = int(input(f"Enter the grade for student {student} in exam {exam}: "))
            grades.append(grade)

        grade_sheet.append(grades)  # Добавляем оценки студента в ведомость

    return grade_sheet

exam_grades = fill_grades()
print("Grade sheet:")
for student, grades in enumerate(exam_grades, start=1):
    print(f"Student {student}: {grades}")
    
    Задание 21
    def count_negative_elements(sequence):
    count = 0

    for element in sequence:
        if element < 0:
            count += 1

    return count

# Пример использования
sequence_A = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25, -26, 27, -28, 29, -30]
sequence_C = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25]

count_A = count_negative_elements(sequence_A)
count_C = count_negative_elements(sequence_C)

if count_A > count_C:
    print("The sequence A has more negative elements.")
elif count_A < count_C:
    print("The sequence C has more negative elements.")
else:
    print("Both sequences have an equal number of negative elements.")














